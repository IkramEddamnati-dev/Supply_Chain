import {
  useForm
} from "./chunk-XNBAQCSO.js";
import {
  $,
  Ae,
  Cr,
  Pt,
  Te,
  Y,
  fR,
  ge,
  get_default,
  hasPath_default,
  he,
  vt,
  xh
} from "./chunk-PLLYDS3P.js";
import {
  require_react
} from "./chunk-NKBGLYTV.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@refinedev/react-hook-form/dist/index.mjs
var import_react = __toESM(require_react(), 1);

// node_modules/lodash-es/_baseHas.js
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}
var baseHas_default = baseHas;

// node_modules/lodash-es/has.js
function has(object, path) {
  return object != null && hasPath_default(object, path, baseHas_default);
}
var has_default = has;

// node_modules/@refinedev/react-hook-form/dist/index.mjs
var import_react2 = __toESM(require_react(), 1);
var import_react3 = __toESM(require_react(), 1);
var import_react4 = __toESM(require_react(), 1);
var L = Object.defineProperty;
var F = (t, a) => L(t, "name", { value: a, configurable: true });
var C = F(({ refineCoreProps: t, warnWhenUnsavedChanges: a, disableServerSideValidation: p = false, ...g } = {}) => {
  let { options: R } = ge(), h = (R == null ? void 0 : R.disableServerSideValidation) || p, U = $(), { warnWhenUnsavedChanges: v, setWarnWhen: f } = vt(), V = a ?? v, o = useForm({ ...g }), { watch: c, setValue: y, getValues: i, handleSubmit: n, setError: E } = o, x = xh({ ...t, onMutationError: (r, s, e) => {
    var b, H;
    if (h) {
      (b = t == null ? void 0 : t.onMutationError) == null || b.call(t, r, s, e);
      return;
    }
    let m = r == null ? void 0 : r.errors;
    for (let D in m) {
      if (!Object.keys(Cr(s)).includes(D)) continue;
      let u = m[D], B = "";
      Array.isArray(u) && (B = u.join(" ")), typeof u == "string" && (B = u), typeof u == "boolean" && u && (B = "Field is not valid."), typeof u == "object" && "key" in u && (B = U(u.key, u.message)), E(D, { message: B });
    }
    (H = t == null ? void 0 : t.onMutationError) == null || H.call(t, r, s, e);
  } }), { query: l, onFinish: d, formLoading: S, onFinishAutoSave: M } = x;
  (0, import_react.useEffect)(() => {
    var e;
    let r = (e = l == null ? void 0 : l.data) == null ? void 0 : e.data;
    if (!r) return;
    Object.keys(Cr(i())).forEach((m) => {
      let b = has_default(r, m), H = get_default(r, m);
      b && y(m, H);
    });
  }, [l == null ? void 0 : l.data, y, i]), (0, import_react.useEffect)(() => {
    let r = c((s, { type: e }) => {
      e === "change" && W(s);
    });
    return () => r.unsubscribe();
  }, [c]);
  let W = F((r) => {
    var s, e;
    if (V && f(true), (s = t == null ? void 0 : t.autoSave) != null && s.enabled) {
      f(false);
      let m = ((e = t.autoSave) == null ? void 0 : e.onFinish) ?? ((b) => b);
      return M(m(r)).catch((b) => b);
    }
    return r;
  }, "onValuesChange"), Q = F((r, s) => async (e) => (f(false), n(r, s)(e)), "handleSubmit");
  return { ...o, handleSubmit: Q, refineCore: x, saveButtonProps: { disabled: S, onClick: (r) => {
    Q((s) => d(s).catch(() => {
    }), () => false)(r);
  } } };
}, "useForm");
var le = F(({ stepsProps: t, ...a } = {}) => {
  let { defaultStep: p = 0, isBackValidate: g = false } = t ?? {}, [R, h] = (0, import_react2.useState)(p), U = C({ ...a }), { trigger: v, getValues: f, setValue: V, formState: { dirtyFields: o }, refineCore: { query: c } } = U;
  (0, import_react2.useEffect)(() => {
    var x;
    let n = (x = c == null ? void 0 : c.data) == null ? void 0 : x.data;
    if (!n) return;
    let E = Object.keys(f());
    console.log({ dirtyFields: o, registeredFields: E, data: n }), Object.entries(n).forEach(([l, d]) => {
      let S = l;
      E.includes(S) && (get_default(o, S) || V(S, d));
    });
  }, [c == null ? void 0 : c.data, R, V, f]);
  let y = F((n) => {
    let E = n;
    n < 0 && (E = 0), h(E);
  }, "go");
  return { ...U, steps: { currentStep: R, gotoStep: F(async (n) => {
    if (n === R) return;
    if (n < R && !g) {
      y(n);
      return;
    }
    await v() && y(n);
  }, "gotoStep") } };
}, "useStepsForm");
var xe = F(({ modalProps: t, refineCoreProps: a, syncWithLocation: p, ...g } = {}) => {
  var A, N;
  let R = Ae(), [h, U] = import_react4.default.useState(false), v = $(), { resource: f, action: V } = a ?? {}, { resource: o, action: c, identifier: y } = Y(f), i = Te(), n = he(), E = Pt(), x = V ?? c ?? "", l = !(typeof p == "object" && (p == null ? void 0 : p.syncId) === false), d = typeof p == "object" && "key" in p ? p.key : o && x && p ? `modal-${y}-${x}` : void 0, { defaultVisible: S = false, autoSubmitClose: M = true, autoResetForm: W = true } = t ?? {}, Q = C({ refineCoreProps: { ...a, meta: { ...d ? { [d]: void 0 } : {}, ...a == null ? void 0 : a.meta } }, ...g }), { reset: $2, refineCore: { onFinish: r, id: s, setId: e, autoSaveProps: m }, saveButtonProps: b, handleSubmit: H } = Q, { visible: D, show: k, close: u } = fR({ defaultVisible: S });
  import_react4.default.useEffect(() => {
    var T, j, K, I;
    if (h === false && d) {
      let w = (j = (T = i == null ? void 0 : i.params) == null ? void 0 : T[d]) == null ? void 0 : j.open;
      if (typeof w == "boolean" ? w && k() : typeof w == "string" && w === "true" && k(), l) {
        let G = (I = (K = i == null ? void 0 : i.params) == null ? void 0 : K[d]) == null ? void 0 : I.id;
        G && (e == null || e(G));
      }
      U(true);
    }
  }, [d, i, l, e]), import_react4.default.useEffect(() => {
    var T;
    h === true && (D && d ? n({ query: { [d]: { ...(T = i == null ? void 0 : i.params) == null ? void 0 : T[d], open: true, ...l && s && { id: s } } }, options: { keepQuery: true }, type: "replace" }) : d && !D && n({ query: { [d]: void 0 }, options: { keepQuery: true }, type: "replace" }));
  }, [s, D, k, d, l]);
  let B = F(async (T) => {
    await r(T), M && u(), W && $2();
  }, "submit"), { warnWhen: O, setWarnWhen: X } = vt(), Z = (0, import_react3.useCallback)(() => {
    var T;
    if (m.status === "success" && ((T = a == null ? void 0 : a.autoSave) != null && T.invalidateOnClose) && R({ id: s, invalidates: a.invalidates || ["list", "many", "detail"], dataProviderName: a.dataProviderName, resource: y }), O) if (window.confirm(v("warnWhenUnsavedChanges", "Are you sure you want to leave? You have unsaved changes."))) X(false);
    else return;
    e == null || e(void 0), u();
  }, [O, m.status]), _ = (0, import_react3.useCallback)((T) => {
    typeof T < "u" && (e == null || e(T)), (!(x === "edit" || x === "clone") || (typeof T < "u" || typeof s < "u")) && k();
  }, [s]), q = v(`${y}.titles.${V}`, void 0, `${E(`${V} ${((A = o == null ? void 0 : o.meta) == null ? void 0 : A.label) ?? ((N = o == null ? void 0 : o.options) == null ? void 0 : N.label) ?? (o == null ? void 0 : o.label) ?? y}`, "singular")}`);
  return { modal: { submit: B, close: Z, show: _, visible: D, title: q }, ...Q, saveButtonProps: { ...b, onClick: (T) => H(B)(T) } };
}, "useModalForm");

export {
  C,
  le,
  xe
};
//# sourceMappingURL=chunk-XSBAJHJQ.js.map
